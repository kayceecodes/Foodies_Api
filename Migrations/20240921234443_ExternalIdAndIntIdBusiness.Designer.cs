// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using foodies_api.Data;

#nullable disable

namespace foodies_api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240921234443_ExternalIdAndIntIdBusiness")]
    partial class ExternalIdAndIntIdBusiness
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<List<string>>("Categories")
                        .HasColumnType("text[]");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Price")
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.Property<int?>("UserLikeBusinessId")
                        .HasColumnType("integer");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserLikeBusinessId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("BusinessUser", b =>
                {
                    b.Property<int>("BusinessesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("BusinessesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("BusinessUser");
                });

            modelBuilder.Entity("foodies_api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstAndLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserLikeBusinessId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserLikeBusinessId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("foodies_api.Models.UserLikeBusiness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessId")
                        .HasColumnType("text");

                    b.Property<string>("BusinessName")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("userLikeBusinesses");
                });

            modelBuilder.Entity("Business", b =>
                {
                    b.HasOne("foodies_api.Models.UserLikeBusiness", null)
                        .WithMany("Businesses")
                        .HasForeignKey("UserLikeBusinessId");
                });

            modelBuilder.Entity("BusinessUser", b =>
                {
                    b.HasOne("Business", null)
                        .WithMany()
                        .HasForeignKey("BusinessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("foodies_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("foodies_api.Models.User", b =>
                {
                    b.HasOne("foodies_api.Models.UserLikeBusiness", null)
                        .WithMany("Users")
                        .HasForeignKey("UserLikeBusinessId");
                });

            modelBuilder.Entity("foodies_api.Models.UserLikeBusiness", b =>
                {
                    b.Navigation("Businesses");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
